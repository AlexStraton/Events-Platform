// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ALways uppercase for a model.
// ALWAYS lowercase when using it in your queries.
model User {
  id                 Int                  @id @default(autoincrement())
  userName           String?
  name               String?
  bio                String?
  email              String               @unique
  image              String?
  emailVerified      DateTime? @map("email_verified")
  createdAt          DateTime             @default(now())
  sessions           Session[]
  accounts           Account[]
  createdEvents      Event[] @relation("CreatedEvents")
  isStaff            Boolean @default(false)
  EventRegistrations EventRegistration[]
}

enum Category {
  MUSIC
  SPORTS
  COMEDY
  FOOD_AND_DRINK
  CONFERENCE
  NETWORKING
  ART
  EDUCATION
  FILM
  HEALTH_AND_WELLNESS
  FUNDRAISER
  GAMING
  OUTDOOR_ADVENTURE
  CULTURE
  BUSINESS
  TECH
  OTHER
}

model Event {
  id                 Int                  @id @default(autoincrement())
  title              String
  userId             Int
  staffId            Int
  image              String
  description        String
  eventDate          DateTime             @default(now())
  price              Int
  location           String
  category           Category
  capacity           Int
  staff               User   @relation(fields: [userId], references: [id], name: "CreatedEvents")
  EventRegistrations EventRegistration[]
}


enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model EventRegistration {
  id                    Int                @id @default(autoincrement())
  eventId               Int
  userId                Int
  status                RegistrationStatus @default(PENDING)
  googleCalendarEventId String?
  createdAt             DateTime           @default(now())
  event                 Event             @relation(fields: [eventId], references: [id])
  user                  User              @relation(fields: [userId], references: [id])
  @@unique([eventId, userId])
}
model Account {
  id                String  @id @default(cuid())
  type              String
  userId            Int
  provider          String
  providerAccountId String  @unique
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User   @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



